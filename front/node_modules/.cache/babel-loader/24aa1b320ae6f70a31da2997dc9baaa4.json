{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, call, takeLatest, delay, put, fork } from \"redux-saga/effects\";\nimport { ADD_POST_REQUEST, ADD_POST_FAILURE, ADD_POST_SUCCESS, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE } from \"../reducers/post\"; // Post\n\nfunction addPostAPI() {}\n\nfunction addPost() {\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addPostAPI);\n\n        case 3:\n          _context.next = 5;\n          return delay(2000);\n\n        case 5:\n          _context.next = 7;\n          return put({\n            type: ADD_POST_SUCCESS\n          });\n\n        case 7:\n          _context.next = 13;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 13;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n} // Comments\n\n\nfunction addCommentAPI() {}\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(addCommentAPI);\n\n        case 3:\n          _context3.next = 5;\n          return delay(2000);\n\n        case 5:\n          _context3.next = 7;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            postId: action.data.postId\n          });\n\n        case 7:\n          _context3.next = 14;\n          break;\n\n        case 9:\n          _context3.prev = 9;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.log(_context3.t0);\n          _context3.next = 14;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context3.t0\n          });\n\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 9]]);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchAddPost), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["C:/Users/mss42/Desktop/SNS React/front/sagas/post.js"],"names":["addPost","watchAddPost","addComment","watchAddComment","postSaga","all","call","takeLatest","delay","put","fork","ADD_POST_REQUEST","ADD_POST_FAILURE","ADD_POST_SUCCESS","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPostAPI","type","error","addCommentAPI","action","postId","data","console","log"],"mappings":";;oDAMUA,O;qDAeAC,Y;qDAOAC,U;qDAkBAC,e;qDAIeC,Q;;AAlDzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,KAAhC,EAAuCC,GAAvC,EAA4CC,IAA5C,QAAwD,oBAAxD;AACA,SAASC,gBAAT,EAA2BC,gBAA3B,EAA6CC,gBAA7C,EAA+DC,mBAA/D,EAAoFC,mBAApF,EAAyGC,mBAAzG,QAAoI,kBAApI,C,CAEA;;AACA,SAASC,UAAT,GAAsB,CAAE;;AAExB,SAAUjB,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMM,IAAI,CAACW,UAAD,CAAV;;AAFR;AAAA;AAGQ,iBAAMT,KAAK,CAAC,IAAD,CAAX;;AAHR;AAAA;AAIQ,iBAAMC,GAAG,CAAC;AACNS,YAAAA,IAAI,EAAEL;AADA,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQQ,iBAAMJ,GAAG,CAAC;AACNS,YAAAA,IAAI,EAAEN,gBADA;AAENO,YAAAA,KAAK;AAFC,WAAD,CAAT;;AARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAAUlB,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMM,UAAU,CAACI,gBAAD,EAAmBX,OAAnB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAIA;;;AACA,SAASoB,aAAT,GAAyB,CAAE;;AAE3B,SAAUlB,UAAV,CAAqBmB,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAMf,IAAI,CAACc,aAAD,CAAV;;AAHR;AAAA;AAIQ,iBAAMZ,KAAK,CAAC,IAAD,CAAX;;AAJR;AAAA;AAKQ,iBAAMC,GAAG,CAAC;AACNS,YAAAA,IAAI,EAAEH,mBADA;AAENO,YAAAA,MAAM,EAAED,MAAM,CAACE,IAAP,CAAYD;AAFd,WAAD,CAAT;;AALR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUQE,UAAAA,OAAO,CAACC,GAAR;AAVR;AAWQ,iBAAMhB,GAAG,CAAC;AACNS,YAAAA,IAAI,EAAEF,mBADA;AAENG,YAAAA,KAAK;AAFC,WAAD,CAAT;;AAXR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBA,SAAUhB,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMI,UAAU,CAACO,mBAAD,EAAsBZ,UAAtB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CAACK,IAAI,CAACT,YAAD,CAAL,EAAqBS,IAAI,CAACP,eAAD,CAAzB,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, call, takeLatest, delay, put, fork } from \"redux-saga/effects\";\r\nimport { ADD_POST_REQUEST, ADD_POST_FAILURE, ADD_POST_SUCCESS, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE } from \"../reducers/post\";\r\n\r\n// Post\r\nfunction addPostAPI() {}\r\n\r\nfunction* addPost() {\r\n    try {\r\n        yield call(addPostAPI);\r\n        yield delay(2000);\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n        });\r\n    } catch (e) {\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\n// Comments\r\nfunction addCommentAPI() {}\r\n\r\nfunction* addComment(action) {\r\n    // ADD_COMMENT_REQUEST의 action을 받아봐서 사용가능\r\n    try {\r\n        yield call(addCommentAPI);\r\n        yield delay(2000);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            postId: action.data.postId,\r\n        });\r\n    } catch (e) {\r\n        console.log(e);\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([fork(watchAddPost), fork(watchAddComment)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}