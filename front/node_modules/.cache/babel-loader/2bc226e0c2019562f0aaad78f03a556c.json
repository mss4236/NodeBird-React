{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\n// user reducer ((((((((((( store은 정확하게는 state, action, reducer가 합쳐진 것 )))))))))))\n// store\nexport var initialState = {\n  isLoggedIn: false,\n  user: {\n    nickname: '박경민',\n    Post: [],\n    Followings: [],\n    Followers: []\n  },\n  signUpData: {}\n}; // action의 이름들\n\nexport var LOG_IN = 'LOG_IN';\nexport var LOG_OUT = 'LOG_OUT';\nexport var SIGN_UP = 'SIGN_UP'; // 실제 액션들\n\nexport var loginAction = {\n  type: LOG_IN,\n  data: {\n    nickname: 'PKM',\n    Post: [],\n    Followings: [],\n    Followers: []\n  }\n};\nexport var logoutAction = {\n  type: LOG_OUT,\n  user: null\n};\nexport var userSignUpAction = function userSignUpAction(data) {\n  // action에 넣을 데이터가 동적인 경우에는 action을 함수로 만든다 ㅇㅋ?\n  return {\n    type: SIGN_UP,\n    data: data\n  };\n}; // reducer\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case LOG_IN:\n      {\n        return _objectSpread({}, state, {\n          isLoggedIn: true,\n          user: action.data\n        });\n      }\n\n    case LOG_OUT:\n      {\n        return _objectSpread({}, state, {\n          isLoggedIn: false,\n          user: action.user\n        });\n      }\n\n    case SIGN_UP:\n      {\n        return _objectSpread({}, state, {\n          signUpData: action.data\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/mss42/Desktop/SNS React/front/reducers/user.js"],"names":["initialState","isLoggedIn","user","nickname","Post","Followings","Followers","signUpData","LOG_IN","LOG_OUT","SIGN_UP","loginAction","type","data","logoutAction","userSignUpAction","reducer","state","action"],"mappings":";AAAA;AAEA;AACA,OAAO,IAAMA,YAAY,GAAG;AACxBC,EAAAA,UAAU,EAAE,KADY;AAExBC,EAAAA,IAAI,EAAE;AACFC,IAAAA,QAAQ,EAAE,KADR;AAEFC,IAAAA,IAAI,EAAE,EAFJ;AAGFC,IAAAA,UAAU,EAAE,EAHV;AAIFC,IAAAA,SAAS,EAAE;AAJT,GAFkB;AAQxBC,EAAAA,UAAU,EAAE;AARY,CAArB,C,CAWP;;AACA,OAAO,IAAMC,MAAM,GAAG,QAAf;AACP,OAAO,IAAMC,OAAO,GAAG,SAAhB;AACP,OAAO,IAAMC,OAAO,GAAG,SAAhB,C,CAEP;;AACA,OAAO,IAAMC,WAAW,GAAG;AACvBC,EAAAA,IAAI,EAAEJ,MADiB;AAEvBK,EAAAA,IAAI,EAAE;AACFV,IAAAA,QAAQ,EAAE,KADR;AAEFC,IAAAA,IAAI,EAAE,EAFJ;AAGFC,IAAAA,UAAU,EAAE,EAHV;AAIFC,IAAAA,SAAS,EAAE;AAJT;AAFiB,CAApB;AASP,OAAO,IAAMQ,YAAY,GAAG;AACxBF,EAAAA,IAAI,EAAEH,OADkB;AAExBP,EAAAA,IAAI,EAAE;AAFkB,CAArB;AAIP,OAAO,IAAMa,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACF,IAAD,EAAU;AAAE;AACxC,SAAO;AACHD,IAAAA,IAAI,EAAEF,OADH;AAEHG,IAAAA,IAAI,EAAEA;AAFH,GAAP;AAIH,CALM,C,CAOP;;AACA,IAAMG,OAAO,GAAG,SAAVA,OAAU,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBjB,YAAyB;AAAA,MAAXkB,MAAW;;AAC9C,UAAOA,MAAM,CAACN,IAAd;AACI,SAAKJ,MAAL;AAAa;AACT,iCACOS,KADP;AAEIhB,UAAAA,UAAU,EAAE,IAFhB;AAGIC,UAAAA,IAAI,EAAEgB,MAAM,CAACL;AAHjB;AAKH;;AACD,SAAKJ,OAAL;AAAc;AACV,iCACOQ,KADP;AAEIhB,UAAAA,UAAU,EAAE,KAFhB;AAGIC,UAAAA,IAAI,EAAEgB,MAAM,CAAChB;AAHjB;AAKH;;AACD,SAAKQ,OAAL;AAAc;AACV,iCACOO,KADP;AAEIV,UAAAA,UAAU,EAAEW,MAAM,CAACL;AAFvB;AAIH;;AACD;AAAS;AACL,iCACOI,KADP;AAGH;AAzBL;AA2BH,CA5BD;;AA8BA,eAAeD,OAAf","sourcesContent":["// user reducer ((((((((((( store은 정확하게는 state, action, reducer가 합쳐진 것 )))))))))))\r\n\r\n// store\r\nexport const initialState = {\r\n    isLoggedIn: false,\r\n    user: {\r\n        nickname: '박경민',\r\n        Post: [],\r\n        Followings: [],\r\n        Followers: [],\r\n    },\r\n    signUpData: {},\r\n};\r\n\r\n// action의 이름들\r\nexport const LOG_IN = 'LOG_IN';\r\nexport const LOG_OUT = 'LOG_OUT';\r\nexport const SIGN_UP = 'SIGN_UP';\r\n\r\n// 실제 액션들\r\nexport const loginAction = {\r\n    type: LOG_IN,\r\n    data: {\r\n        nickname: 'PKM',\r\n        Post: [],\r\n        Followings: [],\r\n        Followers: [],\r\n    }\r\n};\r\nexport const logoutAction = {\r\n    type: LOG_OUT,\r\n    user: null,\r\n};\r\nexport const userSignUpAction = (data) => { // action에 넣을 데이터가 동적인 경우에는 action을 함수로 만든다 ㅇㅋ?\r\n    return {\r\n        type: SIGN_UP,\r\n        data: data\r\n    };\r\n};\r\n\r\n// reducer\r\nconst reducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case LOG_IN: {\r\n            return {\r\n                ...state,\r\n                isLoggedIn: true,\r\n                user: action.data,\r\n            }\r\n        }\r\n        case LOG_OUT: {\r\n            return {\r\n                ...state,\r\n                isLoggedIn: false,\r\n                user: action.user,\r\n            }\r\n        }\r\n        case SIGN_UP: {\r\n            return {\r\n                ...state,\r\n                signUpData: action.data,\r\n            }\r\n        }\r\n        default: {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}