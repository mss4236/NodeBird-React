{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\n// user reducer ((((((((((( store은 정확하게는 state, action, reducer가 합쳐진 것 )))))))))))\nvar dummyUser = {\n  nickname: \"PKM\",\n  Post: [],\n  Followings: [],\n  Followers: []\n}; // store\n\nexport var initialState = {\n  isLoggedIn: false,\n  // 로그인 여부\n  isLoggingOut: false,\n  // 로그아웃 시도중\n  isLoggingIn: false,\n  // 로그인 시도중\n  logInErrorReason: \"\",\n  // 로그인 에러 사유\n  signedUp: false,\n  // 회원가입 성공\n  isSigningUp: false,\n  // 회원가입 시도중\n  singUpErrorReason: \"\",\n  // 회원가입 실패 사유\n  me: null,\n  // 내 정보\n  followingList: [],\n  // 팔로잉 리스트\n  followerList: [],\n  // 팔로워 리스트\n  userInfo: null // 남의 정보\n\n}; // action의 이름들\n// 회원가입\n\nexport var SIGN_UP_REQUEST = \"SIGN_UP_REQUEST\";\nexport var SIGN_UP_SUCCESS = \"SIGN_UP_SUCCESS\";\nexport var SIGN_UP_FAILURE = \"SIGN_UP_FAILURE\"; // 로그인\n\nexport var LOG_IN_REQUEST = \"LOG_IN_REQUEST\";\nexport var LOG_IN_SUCCESS = \"LOG_IN_SUCCESS\";\nexport var LOG_IN_FAILURE = \"LOG_IN_FAILURE\"; // 로그인 후 사용자 정보 불러오기\n\nexport var LOAD_USER_REQUEST = \"LOAD_USER_REQUEST\";\nexport var LOAD_USER_SUCCESS = \"LOAD_USER_SUCCESS\";\nexport var LOAD_USER_FAILURE = \"LOAD_USER_FAILURE\"; // 로그아웃\n\nexport var LOG_OUT_REQUEST = \"LOG_OUT_REQUEST\";\nexport var LOG_OUT_SUCCESS = \"LOG_OUT_SUCCESS\";\nexport var LOG_OUT_FAILURE = \"LOG_OUT_FAILURE\"; // 내 팔로우랑 팔로워 목록 불러오기\n\nexport var LOAD_FOLLOW_REQUEST = \"LOAD_FOLLOW_REQUEST\";\nexport var LOAD_FOLLOW_SUCCESS = \"LOAD_FOLLOW_SUCCESS\";\nexport var LOAD_FOLLOW_FAILURE = \"LOAD_FOLLOW_FAILURE\"; // 다른사람 팔로우\n\nexport var FOLLOW_USER_REQUEST = \"FOLLOW_USER_REQUEST\";\nexport var FOLLOW_USER_SUCCESS = \"FOLLOW_USER_SUCCESS\";\nexport var FOLLOW_USER_FAILURE = \"FOLLOW_USER_FAILURE\"; // 다른사람 언팔로우\n\nexport var UNFOLLOW_USER_REQUEST = \"UNFOLLOW_USER_REQUEST\";\nexport var UNFOLLOW_USER_SUCCESS = \"UNFOLLOW_USER_SUCCESS\";\nexport var UNFOLLOW_USER_FAILURE = \"UNFOLLOW_USER_FAILURE\"; // 팔로워중에 언팔\n\nexport var REMOVE_FOLLOWER_REQUEST = \"REMOVE_FOLLOWER_REQUEST\";\nexport var REMOVE_FOLLOWER_SUCCESS = \"REMOVE_FOLLOWER_SUCCESS\";\nexport var REMOVE_FOLLOWER_FAILURE = \"REMOVE_FOLLOWER_FAILURE\"; // *중요 (리듀서의 단점때문에 어쩔수 없이 만든 액션)\n\nexport var ADD_POST_TO_ME = \"ADD_POST_TO_ME\"; // 실제 액션들\n// 로그인\n\nexport var loginRequestAction = function loginRequestAction(data) {\n  return {\n    type: LOG_IN_REQUEST,\n    data: data\n  };\n};\nexport var loginSuccessAction = {\n  type: LOG_IN_SUCCESS\n};\nexport var loginFailureAction = {\n  type: LOG_IN_FAILURE //error: ,\n\n};\nexport var logoutRequestAction = {\n  type: LOG_OUT_REQUEST,\n  user: null\n};\nexport var logoutSuccessAction = {\n  type: LOG_OUT_SUCCESS\n};\nexport var logoutFailureAction = {\n  type: LOG_OUT_FAILURE\n};\nexport var userSignUpRequestAction = function userSignUpRequestAction(data) {\n  return {\n    // action에 넣을 데이터가 동적인 경우에는 action을 함수로 만든다 ㅇㅋ?\n    type: SIGN_UP_REQUEST,\n    data: data\n  };\n};\nexport var userSignUpSucessAction = {\n  type: SIGN_UP_SUCCESS\n};\nexport var userSignUpFailureAction = {\n  type: SIGN_UP_FAILURE\n}; // reducer\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    // LOG_IN 관련\n    case LOG_IN_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isLoggingIn: true,\n          logInErrorReason: \"\"\n        });\n      }\n\n    case LOG_IN_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          isLoggingIn: false,\n          isLoggedIn: true,\n          me: dummyUser\n        });\n      }\n\n    case LOG_IN_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          isLoggingIn: false,\n          isLoggedIn: false,\n          logInErrorReason: action.error,\n          me: null\n        });\n      }\n    // LOG_OUT 관련\n\n    case LOG_OUT_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isLoggingOut: true\n        });\n      }\n\n    case LOG_OUT_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          isLoggingOut: false,\n          isLoggedIn: false,\n          me: null\n        });\n      }\n\n    case LOG_OUT_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          isLoggingOut: false\n        });\n      }\n    // SIGN_UP 관련\n\n    case SIGN_UP_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case SIGN_UP_SUCCESS:\n      {\n        return {};\n      }\n\n    case SIGN_UP_FAILURE:\n      {\n        return {};\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/mss42/Desktop/SNS React/front/reducers/user.js"],"names":["dummyUser","nickname","Post","Followings","Followers","initialState","isLoggedIn","isLoggingOut","isLoggingIn","logInErrorReason","signedUp","isSigningUp","singUpErrorReason","me","followingList","followerList","userInfo","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","LOAD_FOLLOW_REQUEST","LOAD_FOLLOW_SUCCESS","LOAD_FOLLOW_FAILURE","FOLLOW_USER_REQUEST","FOLLOW_USER_SUCCESS","FOLLOW_USER_FAILURE","UNFOLLOW_USER_REQUEST","UNFOLLOW_USER_SUCCESS","UNFOLLOW_USER_FAILURE","REMOVE_FOLLOWER_REQUEST","REMOVE_FOLLOWER_SUCCESS","REMOVE_FOLLOWER_FAILURE","ADD_POST_TO_ME","loginRequestAction","data","type","loginSuccessAction","loginFailureAction","logoutRequestAction","user","logoutSuccessAction","logoutFailureAction","userSignUpRequestAction","userSignUpSucessAction","userSignUpFailureAction","reducer","state","action","error"],"mappings":"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","sourcesContent":["// user reducer ((((((((((( store은 정확하게는 state, action, reducer가 합쳐진 것 )))))))))))\r\n\r\nconst dummyUser = {\r\n  nickname: \"PKM\",\r\n  Post: [],\r\n  Followings: [],\r\n  Followers: [],\r\n};\r\n\r\n// store\r\nexport const initialState = {\r\n  isLoggedIn: false, // 로그인 여부\r\n  isLoggingOut: false, // 로그아웃 시도중\r\n  isLoggingIn: false, // 로그인 시도중\r\n  logInErrorReason: \"\", // 로그인 에러 사유\r\n  signedUp: false, // 회원가입 성공\r\n  isSigningUp: false, // 회원가입 시도중\r\n  singUpErrorReason: \"\", // 회원가입 실패 사유\r\n  me: null, // 내 정보\r\n  followingList: [], // 팔로잉 리스트\r\n  followerList: [], // 팔로워 리스트\r\n  userInfo: null, // 남의 정보\r\n};\r\n\r\n// action의 이름들\r\n// 회원가입\r\nexport const SIGN_UP_REQUEST = \"SIGN_UP_REQUEST\";\r\nexport const SIGN_UP_SUCCESS = \"SIGN_UP_SUCCESS\";\r\nexport const SIGN_UP_FAILURE = \"SIGN_UP_FAILURE\";\r\n\r\n// 로그인\r\nexport const LOG_IN_REQUEST = \"LOG_IN_REQUEST\";\r\nexport const LOG_IN_SUCCESS = \"LOG_IN_SUCCESS\";\r\nexport const LOG_IN_FAILURE = \"LOG_IN_FAILURE\";\r\n\r\n// 로그인 후 사용자 정보 불러오기\r\nexport const LOAD_USER_REQUEST = \"LOAD_USER_REQUEST\";\r\nexport const LOAD_USER_SUCCESS = \"LOAD_USER_SUCCESS\";\r\nexport const LOAD_USER_FAILURE = \"LOAD_USER_FAILURE\";\r\n\r\n// 로그아웃\r\nexport const LOG_OUT_REQUEST = \"LOG_OUT_REQUEST\";\r\nexport const LOG_OUT_SUCCESS = \"LOG_OUT_SUCCESS\";\r\nexport const LOG_OUT_FAILURE = \"LOG_OUT_FAILURE\";\r\n\r\n// 내 팔로우랑 팔로워 목록 불러오기\r\nexport const LOAD_FOLLOW_REQUEST = \"LOAD_FOLLOW_REQUEST\";\r\nexport const LOAD_FOLLOW_SUCCESS = \"LOAD_FOLLOW_SUCCESS\";\r\nexport const LOAD_FOLLOW_FAILURE = \"LOAD_FOLLOW_FAILURE\";\r\n\r\n// 다른사람 팔로우\r\nexport const FOLLOW_USER_REQUEST = \"FOLLOW_USER_REQUEST\";\r\nexport const FOLLOW_USER_SUCCESS = \"FOLLOW_USER_SUCCESS\";\r\nexport const FOLLOW_USER_FAILURE = \"FOLLOW_USER_FAILURE\";\r\n\r\n// 다른사람 언팔로우\r\nexport const UNFOLLOW_USER_REQUEST = \"UNFOLLOW_USER_REQUEST\";\r\nexport const UNFOLLOW_USER_SUCCESS = \"UNFOLLOW_USER_SUCCESS\";\r\nexport const UNFOLLOW_USER_FAILURE = \"UNFOLLOW_USER_FAILURE\";\r\n\r\n// 팔로워중에 언팔\r\nexport const REMOVE_FOLLOWER_REQUEST = \"REMOVE_FOLLOWER_REQUEST\";\r\nexport const REMOVE_FOLLOWER_SUCCESS = \"REMOVE_FOLLOWER_SUCCESS\";\r\nexport const REMOVE_FOLLOWER_FAILURE = \"REMOVE_FOLLOWER_FAILURE\";\r\n\r\n// *중요 (리듀서의 단점때문에 어쩔수 없이 만든 액션)\r\nexport const ADD_POST_TO_ME = \"ADD_POST_TO_ME\";\r\n\r\n// 실제 액션들\r\n// 로그인\r\nexport const loginRequestAction = (data) => ({\r\n  type: LOG_IN_REQUEST,\r\n  data,\r\n});\r\nexport const loginSuccessAction = {\r\n  type: LOG_IN_SUCCESS,\r\n};\r\nexport const loginFailureAction = {\r\n  type: LOG_IN_FAILURE,\r\n  //error: ,\r\n};\r\n\r\nexport const logoutRequestAction = {\r\n  type: LOG_OUT_REQUEST,\r\n  user: null,\r\n};\r\nexport const logoutSuccessAction = {\r\n  type: LOG_OUT_SUCCESS,\r\n};\r\nexport const logoutFailureAction = {\r\n  type: LOG_OUT_FAILURE,\r\n};\r\n\r\nexport const userSignUpRequestAction = (data) => ({\r\n  // action에 넣을 데이터가 동적인 경우에는 action을 함수로 만든다 ㅇㅋ?\r\n  type: SIGN_UP_REQUEST,\r\n  data: data,\r\n});\r\nexport const userSignUpSucessAction = {\r\n  type: SIGN_UP_SUCCESS,\r\n};\r\nexport const userSignUpFailureAction = {\r\n  type: SIGN_UP_FAILURE,\r\n};\r\n\r\n// reducer\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    // LOG_IN 관련\r\n    case LOG_IN_REQUEST: {\r\n      return {\r\n        ...state,\r\n        isLoggingIn: true,\r\n        logInErrorReason: \"\",\r\n      };\r\n    }\r\n    case LOG_IN_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        isLoggingIn: false,\r\n        isLoggedIn: true,\r\n        me: dummyUser,\r\n      };\r\n    }\r\n    case LOG_IN_FAILURE: {\r\n      return {\r\n        ...state,\r\n        isLoggingIn: false,\r\n        isLoggedIn: false,\r\n        logInErrorReason: action.error,\r\n        me: null,\r\n      };\r\n    }\r\n    // LOG_OUT 관련\r\n    case LOG_OUT_REQUEST: {\r\n      return {\r\n        ...state,\r\n        isLoggingOut: true,\r\n      };\r\n    }\r\n    case LOG_OUT_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        isLoggingOut: false,\r\n        isLoggedIn: false,\r\n        me: null,\r\n      };\r\n    }\r\n    case LOG_OUT_FAILURE: {\r\n      return {\r\n        ...state,\r\n        isLoggingOut: false,\r\n      };\r\n    }\r\n    // SIGN_UP 관련\r\n    case SIGN_UP_REQUEST: {\r\n      return {\r\n        ...state,\r\n      };\r\n    }\r\n    case SIGN_UP_SUCCESS: {\r\n      return {};\r\n    }\r\n    case SIGN_UP_FAILURE: {\r\n      return {};\r\n    }\r\n    default: {\r\n      return {\r\n        ...state,\r\n      };\r\n    }\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}