{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(login),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogin),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(signUp),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchSignUp),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(logOut),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, takeLatest, put, delay, call } from \"redux-saga/effects\";\nimport { LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, LOG_IN_REQUEST, LOG_OUT_FAILURE } from \"../reducers/user\";\nimport axios from \"axios\";\n\nfunction loginAPI() {// 서버에 요청을 보내는 부분\n}\n\nfunction login() {\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(2000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            // put는 dispatch랑 동일\n            type: LOG_IN_SUCCESS\n          });\n\n        case 5:\n          _context.next = 12;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 12;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(LOG_IN_REQUEST, login);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n} // watchSignUp()에서 SIGN_UP_REQUEST가 dispatch되면 signUp를 실행하고,\n// signUp()에서 서버를 호출하고[signUpAPI()] 결과에 따라 dispatch(put)를 한다\n\n\nfunction signUpAPI() {\n  return axios.post(\"/login\");\n}\n\nfunction signUp() {\n  return _regeneratorRuntime.wrap(function signUp$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(signUpAPI);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: SIGN_UP_SUCCESS\n          });\n\n        case 5:\n          _context3.next = 12;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          _context3.next = 12;\n          return put({\n            type: SIGN_UP_FAILURE\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n} ///////////////////////////////////////////////////\n\n\nfunction logOutAPI() {}\n\nfunction logOut() {\n  return _regeneratorRuntime.wrap(function logOut$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 8;\n          break;\n\n        case 3:\n          _context5.prev = 3;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error(_context5.t0);\n          _context5.next = 8;\n          return put({\n            type: LOG_OUT_FAILURE\n          });\n\n        case 8:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 3]]);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return all([fork(watchLogin), // fork는 함수 비동기적 호출\n          fork(watchSignUp)]);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}","map":{"version":3,"sources":["C:/Users/mss42/Desktop/SNS React/front/sagas/user.js"],"names":["login","watchLogin","signUp","watchSignUp","logOut","userSaga","all","fork","takeLatest","put","delay","call","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","LOG_IN_REQUEST","LOG_OUT_FAILURE","axios","loginAPI","type","console","error","signUpAPI","post","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","logOutAPI"],"mappings":";;oDAcUA,K;qDAkBAC,U;qDAUAC,M;qDAcAC,W;qDAQAC,M;qDAUeC,Q;;AA1EzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,KAArC,EAA4CC,IAA5C,QAAwD,oBAAxD;AACA,SACEC,cADF,EAEEC,cAFF,EAGEC,eAHF,EAIEC,cAJF,EAKEC,eALF,QAMO,kBANP;AAOA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,GAAoB,CAClB;AACD;;AAED,SAAUlB,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGI,iBAAMU,KAAK,CAAC,IAAD,CAAX;;AAHJ;AAAA;AAMI,iBAAMD,GAAG,CAAC;AACR;AACAU,YAAAA,IAAI,EAAEP;AAFE,WAAD,CAAT;;AANJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAWIQ,UAAAA,OAAO,CAACC,KAAR;AAXJ;AAYI,iBAAMZ,GAAG,CAAC;AACRU,YAAAA,IAAI,EAAEN;AADE,WAAD,CAAT;;AAZJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBA,SAAUZ,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMO,UAAU,CAACO,cAAD,EAAiBf,KAAjB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAIA;AACA;;;AACA,SAASsB,SAAT,GAAqB;AACnB,SAAOL,KAAK,CAACM,IAAN,CAAW,QAAX,CAAP;AACD;;AAED,SAAUrB,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEI,iBAAMS,IAAI,CAACW,SAAD,CAAV;;AAFJ;AAAA;AAGI,iBAAMb,GAAG,CAAC;AACRU,YAAAA,IAAI,EAAEK;AADE,WAAD,CAAT;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAOIJ,UAAAA,OAAO,CAACC,KAAR;AAPJ;AAQI,iBAAMZ,GAAG,CAAC;AACRU,YAAAA,IAAI,EAAEM;AADE,WAAD,CAAT;;AARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcA,SAAUtB,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMK,UAAU,CAACM,eAAD,EAAkBZ,MAAlB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAIA;;;AAEA,SAASwB,SAAT,GAAqB,CAAE;;AAEvB,SAAUtB,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAGIgB,UAAAA,OAAO,CAACC,KAAR;AAHJ;AAII,iBAAMZ,GAAG,CAAC;AACRU,YAAAA,IAAI,EAAEH;AADE,WAAD,CAAT;;AAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUA,eAAe,SAAUX,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CACRC,IAAI,CAACN,UAAD,CADI,EACU;AAClBM,UAAAA,IAAI,CAACJ,WAAD,CAFI,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, takeLatest, put, delay, call } from \"redux-saga/effects\";\r\nimport {\r\n  LOG_IN_SUCCESS,\r\n  LOG_IN_FAILURE,\r\n  SIGN_UP_REQUEST,\r\n  LOG_IN_REQUEST,\r\n  LOG_OUT_FAILURE,\r\n} from \"../reducers/user\";\r\nimport axios from \"axios\";\r\n\r\nfunction loginAPI() {\r\n  // 서버에 요청을 보내는 부분\r\n}\r\n\r\nfunction* login() {\r\n  try {\r\n    // yield call(loginAPI);   // call은 함수 동기적 호출\r\n    yield delay(2000); // loginAPI 없어서 일단 delay 2초로 함\r\n    // call 이 아니라 fork를 하면 서버에서 답을 받던 안받던 밑에 put를 실행해버림(비동기 호출이기 때문이다)\r\n    // 응답을 받아서 실행해야하는 경우에는 동기 호출인 call을 사용해야한다\r\n    yield put({\r\n      // put는 dispatch랑 동일\r\n      type: LOG_IN_SUCCESS,\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogin() {\r\n  yield takeLatest(LOG_IN_REQUEST, login); // takeLatest가 LOG_IN_REQUEST액션이 dispatch되길 기다려서 dispatch될 때 login 제너레이터를 호출한다\r\n}\r\n\r\n// watchSignUp()에서 SIGN_UP_REQUEST가 dispatch되면 signUp를 실행하고,\r\n// signUp()에서 서버를 호출하고[signUpAPI()] 결과에 따라 dispatch(put)를 한다\r\nfunction signUpAPI() {\r\n  return axios.post(\"/login\");\r\n}\r\n\r\nfunction* signUp() {\r\n  try {\r\n    yield call(signUpAPI);\r\n    yield put({\r\n      type: SIGN_UP_SUCCESS,\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchSignUp() {\r\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\n///////////////////////////////////////////////////\r\n\r\nfunction logOutAPI() {}\r\n\r\nfunction* logOut() {\r\n  try {\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([\r\n    fork(watchLogin), // fork는 함수 비동기적 호출\r\n    fork(watchSignUp),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}